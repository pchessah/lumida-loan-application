import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { gql, ApolloClient, InMemoryCache } from '@apollo/client';
import { GET_LOAN_PRODUCTS } from '../features/graphql/queries/GetLoanProducts';
import { LoanApplicationState, LoanProduct } from '../interfaces/Loan';

// Define the initial state for the loan application slice.
const initialState: LoanApplicationState = {
  products: [],
  loading: false,
  error: null,
};

// Async thunk action to fetch loan products from the GraphQL API.
// This action uses Apollo Client to send a query and returns the loan products data.
export const fetchLoanProducts = createAsyncThunk(
  'loanApplication/fetchLoanProducts', // Action type string
  async () => {
    // Initialize Apollo Client with the GraphQL endpoint and cache.
    const client = new ApolloClient({
      uri: 'http://localhost:5000/graphql',
      cache: new InMemoryCache(),
    });

    // Send the GraphQL query to fetch loan products.
    const response = await client.query({
      query: gql`${GET_LOAN_PRODUCTS}`,
    });

    // Return the list of loan products as the payload for the fulfilled action.
    return response.data.loanProducts as LoanProduct[];
  }
);

// Create a slice for managing the loan application state.
// This slice handles different states (loading, success, error) when fetching loan products.
const loanApplicationSlice = createSlice({
  name: 'loanApplication',
  initialState,
  reducers: {}, // No regular reducers are defined here, only async thunks.
  extraReducers: (builder) => {
    // Handle the pending state when the fetchLoanProducts action is dispatched.
    builder
      .addCase(fetchLoanProducts.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      // Handle the fulfilled state when the fetchLoanProducts action completes successfully.
      .addCase(fetchLoanProducts.fulfilled, (state, action) => {
        state.loading = false;
        state.products = action.payload;
      })
      // Handle the rejected state when the fetchLoanProducts action fails.
      .addCase(fetchLoanProducts.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Failed to fetch loan products';
      });
  },
});

// Export the reducer function generated by the slice to be used in the store.
export default loanApplicationSlice.reducer;
